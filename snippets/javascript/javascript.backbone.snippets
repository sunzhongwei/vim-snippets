snippet model
	var ${1:model} = Backbone.Model.extend({
		defaults: {
		},

		urlRoot: function() {
			return '/${2:$1}';
		},

		initialize: function () {
		}   
	}); 

	return $1;
snippet view
	var ${1} = Backbone.View.extend({
		el: "",		// 挂载点
		tagName: "${2}",
		template: _.template(),

		events: {
			${3}
		},  

		initialize: function () {
			_.bindAll(this, "render", ${4});
		},  

		render: function () {
			this.$el.html(this.template());
			return this;	// for view.render().el
		}   
	}); 

	return $1;
snippet collection 
	var ${1:Thing} = Backbone.Collection.extend({
		model: ${2:model},
		url: "${3}"
	});

	return $1;
snippet router 
	var ${1:Router} = Backbone.Router.extend({
		routes: {
			'new': 'newItem',
			'edit/:itemID':	'editItem',

			// Default
			'*actions': 'index'
		},

		newItem: function() {
			console.log('new');
		},

		editItem: function() {
			console.log('edit');
		},

		index: function() {
			var defaultView = new DefaultView();
			defaultView.render();
		}
	});

	return $1;
snippet define
	define(function(require) {
		var $ = require('jquery');
		var _ = require('underscore');
		var Backbone = require('backbone');
	});
snippet collectionView
	var ${1:viewName} = Backbone.View.extend({
		el: "${2:el}",		// 挂载点
		template: _.template(${3:template}),

		events: {

		},

		initialize: function () {
			this.${4:collection} = new Collection();
			this.listenTo(this.{}, 'reset', this.render, this);
			this.$4.fetch({
				reset: true,
				success: this.onDataHandler,
				error: this.onErrorHandler});
		},

		render: function () {
			this.$el.html(this.template());
			var list = this.$el.find('');
			this.$4(function(item) {
				var itemView = new itemView(item);
				list.append(itemView.render().el);
			}, this);
			return this;
		},

		onDataHandler: function() {
			console.log('拉取数据成功');
		},

		onErrorHandler: function() {
			console.log('网络错误，拉取数据失败，请重试');
		}
	});

	return $1;
snippet require
	var ${1:module} = require('${2:$1}');
snippet config
	require.config({
		baseUrl: '/static/src/js/',

		paths: {
			jquery: '../../bower_components/jquery/dist/jquery.min',
			underscore: '../../bower_components/underscore/underscore-min',
			backbone: '../../bower_components/backbone/backbone-min',
			text: '../../bower_components/text/text',
			moment: '../../bower_components/moment/min/moment.min',

			admin_app: './admin_app'
		},

		// http://requirejs.org/docs/api.html#config-shim
		// 由于 underscore.js 和 backbone.js 并不支持 AMD, 并且未使用 define 方法,
		// 所以需要使用 shim 配置.
		// 历史上，backbone 是支持 requirejs 的，但是作者认为一个类库专门为特定的
		// 加载器添加支持是错误的做法，所以去掉了对 requirejs 的支持。支持作者:)
		shim: {
			underscore: {
				deps: [],
				exports: "_"
			},
			backbone: {
				deps: ['jquery', 'underscore'],
				exports: "Backbone"
			}
		},
	});


	define(function (require) {
	    var Backbone = require('backbone');

		var ${1:Router} = Backbone.Router.extend({
			routes: {
				'new': 'newItem',
				'edit/:itemID':	'editItem',

				// Default
				'*actions': 'index'
			},

			newItem: function() {
				console.log('new');
			},

			editItem: function() {
				console.log('edit');
			},

			index: function() {
				var defaultView = new DefaultView();
				defaultView.render();
			}
		});

		var router = new $1();
		Backbone.history.start();
	});
snippet routerStart
	var router = new Router();
	Backbone.history.start();
snippet forTemplate
	forTemplate: function() {
		var tplJSON = this.toJSON();
		tplJSON.${1:attr}= this.${2:get_$1}();
		return tplJSON;
	}
snippet navigate
	// Not use router.navigate, in case circular dependency.
	Backbone.history.navigate('${0:/}', true);	
snippet destroy
	destroyView: function() {
		this.remove();
	}
snippet tplNoWrap
	var template = _.template(${1:tpl});
	var html = template(${2:data});
	this.setElement(html);
snippet in
	$.inArray(${1:item}, ${2:items});
snippet join
	${1:items}.join('${2:,}');
snippet function
	${1:funcName}: function() {
		${2:// TODO}
	}
snippet filter
	this.$1s.filter(function(${1:item}) {
		return $1.get('attr') === 'value';
	});
snippet each
	this.$1s.filter(function(${1:item}) {
		// $1.get('attr') 
	}, this);

